#!/bin/sh

# Stop on undefined variables or errors
set -u
set -e

if [ $# != 1 ]; then
    echo 'usage: update_from_github <path-to-site-config-file>'
    exit 1
fi

this_script_file=$0
site_config_file=$1

export script_dir=`dirname $this_script_file`
export config_dir=`dirname $site_config_file`

# ------------------------------------------------------------------------------

# Overview of this script:
# ------------------------
#
# The code snapshot will be installed at
#     $_CODE_DIR.new
# (i.e., that directory will contain pinc, tools, etc.)
#
# If $SHIFT_TO_LIVE (defined in the config file) is 'yes',
# or it's 'prompt' and the user answers 'y',
# then $_CODE_DIR.new will be moved to $_CODE_DIR.
# If that directory already exists, it will first be renamed as
#     $_CODE_DIR.bak
# and if *that* directory already exists, it will be REMOVED.
#
# So if this script is being invoked periodically, any "manual"
# changes you make within the snapshot hierarchy will soon disappear.
# Basically, you should treat it as read-only (although I've
# occasionally made quick changes to test some code that I'm
# working on at home).
#
# In order to make the resulting site functional, this script
# makes a few tweaks to the snapshot, replacing certain
# patterns in certain files with site-specific strings.

# ------------------------------------------------------------------------------

check()
{
    status=$?
    blurb=$1
    if [ $status != 0 ]; then
        echo "'$blurb' returned status $status, so exiting"
        exit 1
    fi
}

# ------------------------------------------------------------------------------

# Set _CODE_DIR
. $site_config_file

abort=/bin/false
if [ "$TAG" = "" ]; then
    echo "Error: config file did not define TAG."
    abort=/bin/true
fi
if [ "$_CODE_DIR" = "" ]; then
    echo "Error: config file did not define _CODE_DIR."
    abort=/bin/true
fi
if [ "$GROUP" = "" ]; then
    echo "Error: config file did not define GROUP."
    abort=/bin/true
fi
if [ "$SHIFT_TO_LIVE" = "" ]; then
    echo "Error: config file did not define SHIFT_TO_LIVE."
    abort=/bin/true
fi

if $abort; then
    echo "Aborting due to config errors."
    exit 1
fi

# just as an early warning/reassurance...
echo "Note: SHIFT_TO_LIVE = $SHIFT_TO_LIVE"
echo


# ------------------------------------------------------------------------------
# Get snapshot of code from github.com

$script_dir/get_git_clone $TAG $GROUP $_CODE_DIR.new
check "get_git_clone"

# ------------------------------------------------------------------------------
# Install site-specific info.

configure_script_file=$script_dir/configure
$configure_script_file $site_config_file $_CODE_DIR.new

# ------------------------------------------------------------------------------
# Install PHP dependencies via composer

echo
echo "Installing PHP dependencies..."
composer install -d $_CODE_DIR.new
echo "Require all denied" > $_CODE_DIR.new/vendor/.htaccess
echo

# ------------------------------------------------------------------------------
# Apply any local customizations.

if [ -e $config_dir/customize_deployment ]; then
    echo "Running local deployment customization script..."
    . $config_dir/customize_deployment
fi

# ------------------------------------------------------------------------------

echo ""
$script_dir/diff_rq $_CODE_DIR $_CODE_DIR.new
echo ""

echo "NOTE: using TAG = $TAG"
echo ""

if [ $SHIFT_TO_LIVE = yes ]; then
    # fine
    :

elif [ $SHIFT_TO_LIVE = no ]; then
    echo "SHIFT_TO_LIVE is 'no', so exiting without an install"
    exit 1

elif [ $SHIFT_TO_LIVE = prompt ]; then
    echo -n "Install $_CODE_DIR.new? [yn] "
    read response
    echo -n "Your response was '$response', so "
    if [ "$response" != y ]; then
        echo "exiting."
        exit 1
    fi
    echo "continuing..."

else
    echo "Error: unexpected value for SHIFT_TO_LIVE: '$SHIFT_TO_LIVE'."
    echo "Assuming SHIFT_TO_LIVE='no', so exiting without an install."
    exit 1
fi

# ------------------------------------------------------------------------------

# "Install" the new hierarchy.
echo "installing the new hierarchy..."

if [ -d $_CODE_DIR.bak ]; then
    rm -rf $_CODE_DIR.bak
    check "rm $_CODE_DIR.bak"
fi

if [ -d $_CODE_DIR ]; then
    mv $_CODE_DIR $_CODE_DIR.bak
    check "mv $_CODE_DIR $_CODE_DIR.bak"
fi

mv $_CODE_DIR.new $_CODE_DIR
check "mv $_CODE_DIR.new $_CODE_DIR"

# ------------------------------------------------------------------------------
# vim: ai sw=4 ts=100
