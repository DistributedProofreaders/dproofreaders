name: CI tests
on: [push, pull_request]
jobs:
  phpunit:
    strategy:
      matrix:
        cfg:
          - { os: 'ubuntu-20.04', php: '7.4' }
          - { os: 'ubuntu-22.04', php: '8.1' }
    runs-on: ${{ matrix.cfg.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup PHP, composer
        uses: ./.github/actions/setup-php
        with:
          php-version: ${{ matrix.cfg.php }}
      - name: Setup MySQL, install schema
        uses: ./.github/actions/setup-mysql-db
      - name: Install aspell dependencies for WordCheck tests
        run: sudo apt --fix-broken install aspell aspell-en
      - name: Run phpunit tests
        run: cd SETUP/tests && ../../vendor/bin/phpunit
  jsunit:
    strategy:
      matrix:
        cfg:
          - { os: 'ubuntu-20.04', php: '7.4' }
          - { os: 'ubuntu-22.04', php: '8.1' }
    runs-on: ${{ matrix.cfg.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Node, NPM
        uses: ./.github/actions/setup-node
      - name: Run js unit tests
        run: npm run test
  linting:
    strategy:
      matrix:
        cfg:
          - { os: 'ubuntu-20.04', php: '7.4' }
          - { os: 'ubuntu-22.04', php: '8.1' }
    runs-on: ${{ matrix.cfg.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup PHP, composer
        uses: ./.github/actions/setup-php
        with:
          php-version: ${{ matrix.cfg.php }}
      - name: Setup Node, NPM
        uses: ./.github/actions/setup-node
      - name: Lint PHP code
        run: make -C SETUP lint_code
      - name: Run JS lint
        run: npm run lint
      - name: Run PHP-CS-Fixer and confirm no changes
        run: ./vendor/bin/php-cs-fixer fix --show-progress=none --dry-run --diff
  phpstan:
    # Only run on a single version of Ubuntu/PHP to save GitHub CPU time.
    # PHPStan will perform the same checks irrespective of the platform.
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup PHP, composer
        uses: ./.github/actions/setup-php
        with:
          php-version: '7.4'
      # We don't install MySQL, but we do need pinc/site_vars.php & co.
      # so the static analysis doesn't fail trying to include_once those files.
      - name: Configure site setup
        run: SETUP/configure SETUP/tests/ci_configuration.sh .
      - name: Run PHPStan
        run: ./vendor/bin/phpstan --no-ansi --no-progress --memory-limit=512M
  misc_checks:
    # Only run on a single version of Ubuntu/PHP to save GitHub CPU time.
    # The CSS tests don't use PHP, and the other tests either just check
    # the source code for regexps, or check for data consistency in the
    # character tables.
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup PHP, composer
        uses: ./.github/actions/setup-php
        with:
          php-version: '7.4'
      - name: Setup Node, NPM
        uses: ./.github/actions/setup-node
      - name: Run security checks
        run: make -C SETUP security_checks
      - name: Run charsuite checks
        run: make -C SETUP lint_charsuites
      - name: Run less/CSS checks
        run: make -C SETUP lint_css
      - name: Run best practice checks
        run: make -C SETUP best_practice_checks
  pageload-smoketest:
    strategy:
      matrix:
        cfg:
          - { os: 'ubuntu-20.04', php: '7.4' }
          - { os: 'ubuntu-22.04', php: '8.1' }
    runs-on: ${{ matrix.cfg.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup PHP, composer
        uses: ./.github/actions/setup-php
        with:
          php-version: ${{ matrix.cfg.php }}
      - name: Setup MySQL, install schema
        uses: ./.github/actions/setup-mysql-db
      - name: Install aspell dependencies for WordCheck tests
        run: sudo apt --fix-broken install aspell aspell-en
      - name: Add smoketest DB entries
        run: |
            mysql -uroot -proot < SETUP/smoketests/test_tables.sql
      - name: Run pageload smoketest
        run: |
            SETUP/smoketests/pageload_smoketest.py \
                -u admin -p admin_pass -k admin_key
